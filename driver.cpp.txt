#include <algorithm>
#include <iostream>
#include <stdio.h>
#include <ctype.h>
#include <cstring>
#include <cctype>

#include <vector>
#include <string>
#include <tuple>

#include "FSAtable.h"
#include "tokens.h"
#include "scanner.h"



using namespace std;

// ----------------------- CHAR + KEYWORD VALIDATION FUNCTIONS -------------------------- //

// for checking [ _ | T ] part of identifiers
bool valid_characters(char c) {
    if ( isalpha(c) || isdigit(c) ) { return true; } // identifiers + keywords
    return false;
}

int lastvalidIDCHAR(string s, int i) {
    // originally was pointing to a char array, but it'd only let
    // me see 8 chars, so re-converting current line -> char array
    
    // i is the x that triggered state 3 in prev loop
    int lastValidIDCHAR = 1;
    // -------------------------------------- //
    // convert line string - > char array
    // -------------------------------------- //
    int length = s.length();
    char c_array[length + 1];
    
    strcpy(c_array, s.c_str()); 
    // -------------------------------------- //
    char c;
    
    // s already contains initial c, 
    // so +1 to skip initial index
    
    for (int x = i+1; x < sizeof(c_array)+1; x++) {
        c = c_array[x];
        lastValidIDCHAR = x;
        // if [ _ | T ] is not [a-zA-Z][0-9] - > break!
        if ( !valid_characters(c) ) { break;}
        
    }
    
    return lastValidIDCHAR;
}

bool isvalidKEYWORD(vector<char> new_chars) {
    
    int iskeyword = keywordTokens(new_chars).compare("NOT_KEYWORD");
    // if it is a keyword return true
    if (iskeyword != 0) { return true; }
    return false;
}

// -------------------------------------------------------------------------------------- //

// DIGIT VALIDATION FUNCTION BELOW

int lastvalidDIGITCHAR(string s, int i) {
    // similar code to function above w/ tweaks
    int lastValidDIGITCHAR = 1;
    // -------------------------------------- //
    // convert line string - > char array
    // -------------------------------------- //
    int length = s.length();
    char c_array[length + 1];
    
    strcpy(c_array, s.c_str()); 
    // -------------------------------------- //
    char ch;

    for ( int x = i+1; x < sizeof(c_array)+1; x++) {
        ch = c_array[x];
        lastValidDIGITCHAR = x;
        if ( !state_4(ch) ) { break;}
    }
    
    return lastValidDIGITCHAR;
}


void FA_driver(vector<string> file_txt) {
    
    vector<char> new_chars; // used to store parts of input
    
    int line_num = 1;
    
    int opening_index;
    int closing_index;
    
    for (auto i = file_txt.begin(); i != file_txt.end(); ++i) { 
        // reading input stores every file line in a vec<string>; the main for
        // loop of the driver used to parse through the file line by line.
        string s = *i;
        
        // -------------------------------------- //
        // converting line string - > char array
        int length = s.length();
        char char_array[length + 1];
        
        strcpy(char_array, s.c_str()); 
        // -------------------------------------- //
        
        for (int x = 0; x < sizeof(char_array); x++ ) {
            // STATE 0: INITIAL -------------------------------------------------------------------------- //

            // lookahead char ------------ //
        	char lookahead = char_array[x+1];
        	int next_state = FSA_table(lookahead);
	        // --------------------------- //
	        
        	// current char -------------- //
            char c = char_array[x];
            int state = FSA_table(c);
            // --------------------------- //
            
	        // if first instance is a space, then skip this x
	        // end of iterator was returning null so I had to 
	        // check for it with 2nd 1/2 of or stmt
	        if ( isspace(c) || int(c) == 0) { continue; } 
	        // comments are already taken care of :)
            
            // ------------------------------------------------------------------------------------------ //
            switch (state) {
    			
                // ERROR STATE -------------------------------------------------------------------------- //
    			case -1:
    				// the main FSA table's default return value is -1. If c doesn't  
    				// exsist in a state, then return -1; because, it isn't valid.
                    cout <<  "ERROR: INVALID CHAR ' " << int(c) << " '";
                    cout <<  " at line #: " << line_num <<  " char #: " << x;
                    exit (EXIT_FAILURE);
                    
                // -------------------------------------------------------------------------------------- //
                break;
                
                // STATE 1 ------------------------------------------------------------------------------ //
    			case 1:
    				// all tokens in state 1 are final, they only have this state.
    				new_chars.push_back(c);
    				aufhoren_dieScanner(new_chars, line_num, x+1, state);
    				// will use this continuously throughout program to clear vec<char>
    				// when token has been identified and put in tuple by scanner 
    				new_chars.clear();

                // -------------------------------------------------------------------------------------- //
                break;
                
                // STATE 2 ------------------------------------------------------------------------------ //
    			case 2:
    			    // since all operators are only valid dual operators if lookahead = s2; otherwise, 
    				// it is a single op/delim or an invalid char (i.e. a lone '!' char).
    				new_chars.push_back(c);
    				
    				if ( next_state == 2 ) {
    				    new_chars.push_back(lookahead);
                        
    				    int not_dualop = opUndDelimTokens(new_chars).compare("INVALID CHARACTER");
                        // --------------------------------------------------------------------------- //
                        if ( not_dualop != 0 ) {
                            // if is valid dual op, call scanner
                            aufhoren_dieScanner(new_chars, line_num, x+1, state);
                            new_chars.clear();
                            
                            // next char is lookahead so skip
                            x++;
        				}
        				else {
        				    // if it isn't a valid dual op pop lookahead and let scanner sort it out
        				    new_chars.pop_back();
        				    aufhoren_dieScanner(new_chars, line_num, x+1, state);
        			
        				    new_chars.clear();
        				}
        				// --------------------------------------------------------------------------- //
        				
    				}
    				else {
    				    // if the lookahead's state isn't 2, then let   
    				    // the scanner figure out the token 
        				aufhoren_dieScanner(new_chars, line_num, x+1, state);

        				new_chars.clear();
    				}
                
                // -------------------------------------------------------------------------------------- //
                break;
                
                // STATE 3 ------------------------------------------------------------------------------ //
    			case 3:
    			// need to parse the string in a different function otherwise the isdigit()
    			// will go to case 4 and will do switch splits and cause mass confusion. 
    			closing_index = lastvalidIDCHAR(s, x); 
    			opening_index = x;
    			
    			char alpha_digit_char; // ID + KEYWORD char temp storage
    			
    			// --------------------------------------------------------------------------- //
    			if (closing_index == 1) {
    			    // if next char isn't allowed in an ID, then just
    			    // the current char is valid ID: call scanner
    			    new_chars.push_back(c);
    			    aufhoren_dieScanner(new_chars, line_num, x+1, state);

        			new_chars.clear();
        			continue;
    			}
    			else {
    			    while ( opening_index < closing_index ) {
    			        alpha_digit_char = char_array[opening_index];
    			        new_chars.push_back(alpha_digit_char);
    			        opening_index++;
    			    }
    			}
    			// --------------------------------------------------------------------------- //
    			
    			// --------------------------------------------------------------------------- //
    			if ( isvalidKEYWORD(new_chars) ) {
    			    // if is a keyword call scanner and change state to 5 (since 4 is
    			    // for digits, and I don't want to provoke the switch statement).
    			    aufhoren_dieScanner(new_chars, line_num, x+1, 5);
    			    new_chars.clear();
    			    
    			    // setting our for loop x to the last index of the keyword
    			    x = closing_index-1; 
    			}
    			else {
    			    aufhoren_dieScanner(new_chars, line_num, x+1, state);
    			    new_chars.clear();
    			    
    			    // setting our for loop x to the last index of the identifier
    			    x = closing_index-1; 
    			}
    			// --------------------------------------------------------------------------- //
    			
                // -------------------------------------------------------------------------------------- //
                break;
                
                // STATE 4 ------------------------------------------------------------------------------ //
                case 4:
                    // same code as state 3 with slight tweaks. Done in a separate 
                    // function to avoid switch-haps
    				closing_index = lastvalidDIGITCHAR(char_array, x); 
    			    opening_index = x;
    			    char digit_char;
    			    // ----------------------------------------------------------- //
    			    if (closing_index == 1) {
        			    // if next char isn't allowed in an ID, then just
        			    // the current char is valid ID: call scanner
        			    new_chars.push_back(c);
        			    aufhoren_dieScanner(new_chars, line_num, x+1, state);

            			new_chars.clear();
            			continue;
        			}
        			else {
        			    while ( opening_index < closing_index ) {
        			        alpha_digit_char = char_array[opening_index];
        			        new_chars.push_back(alpha_digit_char);
        			        opening_index++;
        			    }
                        aufhoren_dieScanner(new_chars, line_num, x+1, state);
                        new_chars.clear();
                        // setting our for loop x to the last index of the keyword
                        x = closing_index-1; 
        			}
        			// ----------------------------------------------------------- //
        			
                // -------------------------------------------------------------------------------------- //
                break;
                
            }
        }
        line_num++;
    }
    // EOF CALL ----------------------------------------------------------------------------- //
    // the EOF token is generated on a newline after the final line of input
    new_chars.push_back('\0');
    aufhoren_dieScanner(new_chars, line_num, 1, -2);
    new_chars.erase(new_chars.begin());
    // -------------------------------------------------------------------------------------- //
}

